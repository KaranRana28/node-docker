name: blogging-app

services:
  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
  node-app:
    build:
      context: .
      dockerfile: Dockerfile
      # args:
      #   - NODE_ENV=development
    restart: unless-stopped
    env_file: .env
    links:
      - mongo
      - redis
    depends_on:
      - mongo
      - redis

  mongo:
    image: mongo:7.0.4
    # container_name: mongo
    restart: unless-stopped
    env_file: .env
    environment:
      # MONGO_INITDB_ROOT_USERNAME and MONGO_INITDB_ROOT_PASSWORD together create
      # a root user in the admin authentication database and ensure that authentication is enabled when the container starts.
      - MONGO_INITDB_ROOT_USERNAME=$DB_USER
      - MONGO_INITDB_ROOT_PASSWORD=$DB_USER_PWD
      - MONGO_INITDB_DATABASE=$DB_NAME
    ports:
      - '$DB_LOCAL_PORT:27017'
    volumes:
      - mongo-db:/data/db
    # - ./addons/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    #     # The named volume "mongo-db" will persist the data stored in Mongo’s default data directory, /data/db.
    #     # This will ensure that you don’t lose data in cases where you stop or remove containers.

  redis:
    image: redis:7.2.3
    # container_name: redis
    restart: unless-stopped
    env_file: .env
    ports:
      - '$REDIS_PORT:6379'
    # command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD} // to use requirepass need to setup redis.conf file first
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data/cache

volumes:
  mongo-db:
  cache:
#     driver: local